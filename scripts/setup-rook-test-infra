#!/bin/bash

#Functction to check if pod is up
#Takes atleast 2 paramaters
#$1 - Pod name mask - required
#$2 - number of pods expected to be up that match the pod name($1) - required
#$3 - namespace the pods are expected to be in - optional
pod::isUp(){
  	x=1
	while [ $x -le 15 ]
	do
	  if [ "$#" -eq 3 ]; then
	  	declare -i y=$(kubectl get pods -n $3 2>/dev/null  | grep $2 | wc -l )
	  else
	  	declare -i y=$(kubectl get pods 2>/dev/null  | grep $1 | wc -l )
	  fi
	  if [ $y -ge $2 ]
		then
			break
	 fi
	  x=$(( $x + 1 ))
	  sleep 10
	done

	if [ $x -gt 15 ]; then
		retval=1
	else
		retval=0
	fi

	return $retval

}

#Functction to check if pod is in Running status or not
#Takes atleast 2 paramaters
#$1 - Pod name mask - required
#$2 - number of pods expected to be in Running state that match the pod name($1) - required
#$3 - namespace the pods are expected to be in - optional
pod::isRunning(){
  	x=1
	while [ $x -le 15 ]
	do
	  if [ "$#" -eq 3 ]; then
	  	declare -i y=$(kubectl get pods -n $3 2>/dev/null | grep $1 | awk '{print $3}' | grep Running | wc -l)
	  else
	  	declare -i y=$(kubectl get pod 2>/dev/null  | grep $1 | awk '{print $3}' | grep Running | wc -l)
	  fi
	  if [ $y -ge $2 ]
		then
			break
	 fi
	  x=$(( $x + 1 ))
	  sleep 10
	done

	if [ $x -gt 15 ]; then
		retval=1
	else
		retval=0
	fi

	return $retval
}

#function to check of rook operator is up
rookOperator::isUp(){
    pod::isUp rook-operator 1
	iretval=$?
	if [ "$retval" == 0 ]
	then
    	echo "rook-operator Started"
	else
     	echo "rook-operator Not Started"
     	return 1
	fi

	pod::isRunning rook-operator 1
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-operator Running"
	else
	     echo "rook-operator Not Running"
	     return 1
	fi

	return 0
}


#function to check of rook cluster is up
rookCluster::isUp(){
    pod::isUp mon 3 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster monitors started"
	else
	     echo "rook-cluster monitors not started"
	     return 1
	fi

	pod::isRunning mon 3 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster monitors running"
	else
	     echo "rook-cluster monitors not running"
	     return 1
	fi


	pod::isUp rook-api 1 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster rook-api started"
	else
	     echo "rook-cluster rook-api not started"
	     return 1
	fi

	pod::isRunning rook-api 1 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster rook-api Running"
	else
	     echo "rook-cluster rook-api not running"
	     return 1
	fi

	pod::isUp osd 2 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster osd started"
	else
	     echo "rook-cluster rook-api not started"
	     return 1
	fi

	pod::isRunning osd 2 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-cluster osd running"
	else
	     echo "rook-cluster osd not running"
	     return 1
	fi

	return 0

}

#function to check of rook client is up
rookClient::isUp(){
    pod::isUp rook-client 1 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
    	echo "rook-client Started"
	else
     	echo "rook-client Not Started"
     	return 1
	fi

	pod::isRunning rook-client 1 rook
	iretval=$?
	if [ "$retval" == 0 ]
	then
	     echo "rook-client Running"
	else
	     echo "rook-client Not Running"
	     return 1
	fi

	return 0
}


  export HOME=/home/root
  export DEBIAN_FRONTEND=noninteractive
  export LC_ALL=C

    docker info

    #Docker import the image there, with ci:latest or something
    docker load < $(find /from-host/ -type f -name *.tar)

    #Git download test repo --> templates, rook-*.yamls, controller.yaml
    git clone https://github.com/dangula/rookStartUpScripts.git

    cd rookStartUpScripts/

    chmod +x rook-dind-cluster-v1.5.sh

    ./rook-dind-cluster-v1.5.sh up

    #untaint
    kubectl taint nodes --all dedicated-

    sleep 5

    #add drain
    kubectl drain kube-node-2 --force --ignore-daemonsets

    sleep 5

    kubectl delete node kube-node-2 --force

    sleep 5

     #PATCH KUBE-CONTROLLER-MANAGER
     yes | cp -rf kube-controller-manager.json $(find /var/lib/docker/aufs/mnt -type f -name kube-controller-manager.json)

     sleep 5

     #INSTALL CEPH IN ALL NODES
     curl --unix-socket /var/run/docker.sock http:/containers/json | jq -r '.[].Id' | xargs -i docker exec -i {} bash -c 'apt-get -y update && apt-get install -qqy ceph-common'

    #START ROOK OPERATOR
    kubectl create -f rook/rook-operator.yaml
    rookOperator::isUp
    sleep 5

   #START ROOK CLUSTER
   kubectl create -f rook/rook-cluster.yaml
   rookCluster::isUp
   sleep 5

    #START ROOK client
   kubectl create -f rook/rook-client.yaml
   rookClient::isUp
    sleep 30


    echo Rook Test infrastructure setup is complete!!! > /done.txt
